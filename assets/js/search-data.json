{
  
    
        "post0": {
            "title": "823 HW2",
            "content": "- . Write a function to generate an arbitrary large expansion of a mathematical expression like &#960;. . (Hint: You can use the standard library decimal or the 3rd party library sympy to do this) . For the first function, I used the sympy library (mpmath). Since the function wasn&#39;t outputting enough decimal places, I set the mp.dps as 1000. . This function has two input conditions to check, either pi(&#960;) or e(euler number). Next, I set a multiplier and multiply them by it. Then I set the precision criterion to get the number of digits after the decimal wanted and turn it into a string. This creates the decimal expansion of a given number. . import math try: from sympy.mpmath import mp except ImportError: from mpmath import mp mp.dps=1000 def create_expansion(precision,number,multiplier): &#39;&#39;&#39; this function takes a number with a multiplier and outputs its decimal expansion with a specific number of decimals input: precision, number of decimals wanted number, number to be expanded(&#39;pi&#39; or &#39;e&#39;) multiplier, multiplier of the number to be expanded returns: an string of decimal expansion of the input number &#39;&#39;&#39; #check if number is pi if number ==&#39;pi&#39;: #create a string of the number(multiplied by the multiplier) expansion with precision as number of decimals str_pi = str(( multiplier*mp.pi)).replace(&#39;.&#39;,&#39;&#39;)[0:precision] return(str_pi) #check if number is e elif number ==&#39;e&#39;: str_e = str(( multiplier*mp.e)).replace(&#39;.&#39;,&#39;&#39;)[0:precision] return(str_e) #type either &#39;pi&#39; or &#39;e&#39; for number in create_expansion function #print(create_expansion(50,&#39;pi&#39;,17)) #print(create_expansion(25,&#39;e&#39;,1)) . File &#34;&lt;tokenize&gt;&#34;, line 20 if number ==&#39;pi&#39;: ^ IndentationError: unindent does not match any outer indentation level . Unit test of create_expansion function: . import unittest class TestNotebook(unittest.TestCase): def test_create_expansion(self): &quot;&quot;&quot;test the expansion of the number we want&quot;&quot;&quot; self.assertEqual(create_expansion(5,&#39;pi&#39;,1),str(31415)) unittest.main(argv=[&#39;&#39;], verbosity=2, exit=False) . test_create_expansion (__main__.TestNotebook) test the expansion of the number we want ... ok - Ran 1 test in 0.001s OK . &lt;unittest.main.TestProgram at 0x7f8427f6b950&gt; . - . - Write a function to check if a number is prime. Hint: See Sieve of Eratosthenes . For this function, the first criterion I set is to check if the given number is 1 or not. If it is 1, then it is not a prime number. . Next we check if the given number is 2 or not. If it is 2, then it is a prime number. . Then we check if the given number can be divided by 2, if so, it is an even number, thus it is not a prime number. . Lastly, we check from 3 to the positive square root of x so that it only iterate a portion of X values. The step is 2 so no even number other than 2 will participate in this iteration. . This function reduces the run time complexity dramatically from a function without the above steps. . import math def IsPrimeNumber(x): &#39;&#39;&#39; this function takes an input number and test whether it is a prime number or not and outputs an answer x: int, input to be tested returns: an answer (True or False) &#39;&#39;&#39; # exclude 1 which is not prime if x == 1: return False # take out 2 as a base case elif x == 2: return True elif x % 2 == 0: return False else: # iterate through 3 to the positive square root of x to see if x can be divided by any, step is 2 which excludes all even number. for y in range(3, int(math.sqrt(x) + 1), 2): # if x can be divided, then x is not prime if x % y == 0: return False # if x can not be divided, then x is a prime number return True . Unit test of IsPrimeNumber function: . class TestNotebook(unittest.TestCase): def test_IsPrimeNumber(self): &quot;&quot;&quot;test IsPrimeNumber&quot;&quot;&quot; self.assertFalse(IsPrimeNumber(1)) self.assertTrue(IsPrimeNumber(2)) self.assertFalse(IsPrimeNumber(51)) self.assertTrue(IsPrimeNumber(1373)) self.assertFalse(IsPrimeNumber(33333)) unittest.main(argv=[&#39;&#39;], verbosity=2, exit=False) . test_IsPrimeNumber (__main__.TestNotebook) test IsPrimeNumber ... ok - Ran 1 test in 0.001s OK . &lt;unittest.main.TestProgram at 0x7f84390c1d10&gt; . - . - Write a function to generate sliding windows of a specified width from a long iterable (e.g. a string representation of a number) . Then we have the window function which generates sliding windows of a specified width from a long iterable. This one is pretty straight forward, it returns a list of sliding windows(substrings of the input string). One interesting part I did in this function is that I added a list called &#39;seen&#39; which records every slinding windows(substrings) we have seen so we will not have repeated slinding windows(substrings) in the output list(non_repeated). This will reduce the run time complexity since a lof of redundant values will be checked later if the specified width is too small. . def window(seq, width): &#39;&#39;&#39; this function takes an input string and returns all the substrings with the length wanted seq: str, input string to be sliced into &#39;windows&#39; width: length of windows wanted returns: all the substrings(windows) with the length wanted(width) &#39;&#39;&#39; #exclude the number before the decimal seq=seq[1:] #create two lists, seen and non_repeated seen, non_repeated =[], [] #iterate through the input string for i in range(0,len(seq)-(width-1)): #create windows of given width t = seq[i:i+width] #excluded repeated windows if t not in seen: #collect non-repeated windows non_repeated.append(t) #collect repeated windows as seen windows seen.append(t) #return a list of non-repeated windows return list(non_repeated) . print(window(str(12345678), 4)) . [&#39;2345&#39;, &#39;3456&#39;, &#39;4567&#39;, &#39;5678&#39;] . Unit test of window function: . class TestNotebook(unittest.TestCase): def test_window(self): &quot;&quot;&quot;test window.&quot;&quot;&quot; self.assertEqual(window(str(12345678), 4), [&#39;2345&#39;, &#39;3456&#39;, &#39;4567&#39;, &#39;5678&#39;]) unittest.main(argv=[&#39;&#39;], verbosity=2, exit=False) . test_window (__main__.TestNotebook) test window. ... ok - Ran 1 test in 0.001s OK . &lt;unittest.main.TestProgram at 0x7f8427f0f710&gt; . - . Now use these helper functions to write the function that you need. . Write a unit test for this final function, given that the first 10-digit prime in the expansion e is 7427466391. . Finally, solve the given problem. . This function uses all of the helper functions I wrote above. . It iterates through the list of numbers generated by the window function from the string of the expansion of the given number generated by the create_expansion function, and then checks whether every number of this list is a prime number using the IsPrimeNumber function. . Lastly, it returns the first prime number of the expansion with the wanted length of digits. . def give_prime_expansion(digits_of_number, input_number, multiplier, length_of_prime): &#39;&#39;&#39; this function takes the digits of number, an input number(&#39;pi&#39; or &#39;e&#39;), a multiplier and the length of prime number we want, returns the first prime number in the expansion. digits_of_number: the number of decimal digits the input_number: pi or e multiplier: a multiplier of the input number length_of_prime: the length of the prime number we want returns: the first prime number in the decimal expansion of the input number &#39;&#39;&#39; #iterte through the list of windows of numbers for numbers in window(create_expansion(digits_of_number,input_number,multiplier),length_of_prime): #check if the number is prime if IsPrimeNumber(int(numbers)): #output the number we want print(f&quot;The first {length_of_prime}-digit prime number in the decimal expansion of {multiplier} {input_number} is: &quot;) return(int(numbers)) break . Thus we can find the first 10-digit prime in the decimal expansion of 17&#960;. . print(give_prime_expansion(99,&#39;pi&#39;,17,10)) . The first 10-digit prime number in the decimal expansion of 17 pi is: 8649375157 . Unit test of give_prime_expansion function: . class TestNotebook(unittest.TestCase): def test_give_prime_expansion(self): &quot;&quot;&quot;test test_give_prime_expansion .&quot;&quot;&quot; self.assertEqual(give_prime_expansion(120,&#39;e&#39;,1,10), 7427466391) self.assertEqual(give_prime_expansion(99,&#39;pi&#39;,1,5), 14159) unittest.main(argv=[&#39;&#39;], verbosity=2, exit=False) . test_give_prime_expansion (__main__.TestNotebook) test test_give_prime_expansion . ... . The first 10-digit prime number in the decimal expansion of 1 e is: The first 5-digit prime number in the decimal expansion of 1 pi is: . ok - Ran 1 test in 0.008s OK . &lt;unittest.main.TestProgram at 0x7f8427f19d90&gt; .",
            "url": "https://yiyangzhang2020.github.io/yz628-823-blog/2021/09/17/Yiyang-Zhang-823-HW2.html",
            "relUrl": "/2021/09/17/Yiyang-Zhang-823-HW2.html",
            "date": " • Sep 17, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "823 HW1",
            "content": "Euler 10 . The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17. . Find the sum of all the primes below two million. . Solution: . I decided to write a function to test whether the given number is a prime number or not and then sum up all of the numbers that are prime in the given range. . One intersting thing I did to my code is that, after the initial try, I find that my code is taking too long so to output the answer so I decided to reduce the run time. . I set the range in my IsPrimeumber function from (3, x) to (3, int(math.sqrt(x)+1),2) so that it only iterate to the square root of X and the step is 2 so no even number other than 2 will participate in the iteration. . This reduces the run time dramatically. . import math def IsPrimeNumber(x): &#39;&#39;&#39; this function takes an input number and test whether it is a prime number or not and outputs an answer x: int, input to be tested returns: an answer (True or False) &#39;&#39;&#39; # exclude 1 which is not prime if x == 1: return False # take out 2 as a base case elif x==2: return True elif x % 2==0: return False else: # iterate through 2 to x to see if x can be divided by any for y in range(3, int(math.sqrt(x)+1),2): # if x can be divided, then x is not prime if x % y == 0: return False # if x can not be divided, then x is a prime number return True # set the original sum value as 0 sum = 0 # set the upper range as max max = 2000000 # iterate through 2 to max for z in range(2, max): # if z is a prime number, add z to sum if IsPrimeNumber(z): sum += z # output the sum print(f&quot;The sum of prime numbers in this range is {sum}&quot;) . Euler 31 . In the United Kingdom the currency is made up of pound (&#163;) and pence (p). There are eight coins in general circulation: . 1p, 2p, 5p, 10p, 20p, 50p, &#163;1 (100p), and &#163;2 (200p). . It is possible to make &#163;2 in the following way: . 1&#215;&#163;1 + 1&#215;50p + 2&#215;20p + 1&#215;5p + 1&#215;2p + 3&#215;1p . How many different ways can &#163;2 be made using any number of coins? . Solution: . This solution is fairly simple, I calculated every possible combination of different coin with a huge loop, from the outside layer of 100p counts all the way to the inner layer of 2p counts. . After this huge loop, I added the last count value of 200p which is only 1, to the final count. . One intersting fact about this one is that I actually didn&#39;t find anything intersting to do to it. So I will just leave it like this. . # set a count value count = 0 # set the last count value(200p which is only 1) to be added in the end last_count=1 &#39;&#39;&#39; This loop calculates the amount of each type of coins to be divided in corresponding money range(200,100,50 etc) &#39;&#39;&#39; # range: number of 100p coins, maximum 2, range(3) for a in range(3): # range: number of 50p counts for b in range(int(1+(200-100*a)/50)): # range: number of 20p counts for c in range(int(1+(200-100*a-50*b)/20)): # range: number of 10p counts for d in range(int(1+(200-100*a-50*b-20*c)/10)): # range: number of 5p counts for e in range(int(1+(200-100*a-50*b-20*c-10*d)/5)): # range: number of 2p counts for f in range(int(1+(200-100*a-50*b-20*c-10*d-5*e)/2)): count += 1 # Now we have calculated all kinds of combination of coins to combine 200, # equals count # Added the last 1 for the 200p case final_count=count+last_count #Output the result print (f&quot;The final count is {final_count}&quot;) . The final count is 73682 . euler 146 . The smallest positive integer n for which the numbers n2+1, n2+3, n2+7, n2+9, n2+13, and n2+27 are consecutive primes is 10. The sum of all such integers n below one-million is 1242490. . What is the sum of all such integers n below 150 million? . Solution . For this question, I did a couple of functions to be used in my loop to calculate. . Basically, I iterate through 10 to cap(the maximum value to be tested) with a step of 2 (excludes all even numbers) to test whether the numbers n2+1, n2+3, n2+7, n2+9, n2+13, and n2+27 are consecutive primes using the isAsked function which test each one using the isPrime function. . One interesting thing I did is that I created a list which basically records all the prime numbers, so like for the N^2 + 27 maximum case we can only test whether it can be divided by these prime numbers. This will excluded all other unnecessary numbers to be tested and thus save us a lot of run time. . import math # Set the maximum integar value cap = int(150e6) # Create and empty list to store the prime numbers we found primes = [] &#39;&#39;&#39; A function that list all the prime numbers we found n: int, input number primes: list, output n into &#39;&#39;&#39; def listPrimes(n, primes): # base case if n == 1: return [] # other cases for p in primes: if p &gt; int(math.sqrt(n)): break if n % p == 0: return primes primes.append(n) return primes # For N^2 + 27 maximum case for i in range(2, int(math.sqrt(cap**2+27)+1)): primes = listPrimes(i, primes) print(primes) &#39;&#39;&#39; A function that tests whether n is a prime number or not, returns True or False n: int, number to be tested &#39;&#39;&#39; def isPrime(n): for p in primes: if n % p == 0: return False if p &gt; math.sqrt(n): return True return True &#39;&#39;&#39; A function that test if given number n is asked to be calculated in the isPrime function above Returns True or False for each n n: int, input number to be tested &#39;&#39;&#39; def isAsked(n): if not isPrime(n**2+1): return False if not isPrime(n**2+3): return False if isPrime(n**2+5): return False if not isPrime(n**2+7): return False if not isPrime(n**2+9): return False if isPrime(n**2+11): return False if not isPrime(n**2+13): return False # only interate by setp of 2 to avoid even numbers in this range for x in range(n**2+15, n**2+27, 2): if isPrime(x): return False if not isPrime(n**2+27): return False return True # declare a sm value sm = 0 #loop through 10 to cap(max) with a step of 2 for n in range(10, cap, 2): if isAsked(n): print(n) sm += n print(f&quot;sum = {sm}&quot;) .",
            "url": "https://yiyangzhang2020.github.io/yz628-823-blog/2021/09/03/Yiyang-Zhang-823-HW1.html",
            "relUrl": "/2021/09/03/Yiyang-Zhang-823-HW1.html",
            "date": " • Sep 3, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://yiyangzhang2020.github.io/yz628-823-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://yiyangzhang2020.github.io/yz628-823-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yiyangzhang2020.github.io/yz628-823-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yiyangzhang2020.github.io/yz628-823-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}